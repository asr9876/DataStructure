class Solution {
public:
    int firstOccurance(vector<int>& nums, int target){
        int s = 0 , e = nums.size()-1; 
        int mid = (s+e)/2;
        int aws = -1 ;
        while(s <= e){
            if(nums[mid]==target){
                aws = mid;
                e = mid - 1;
            }
            else if(nums[mid] < target){
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }
            mid = (s+e)/2;
        }return aws;
    }
    int lastOccurance(vector<int>& nums, int target){
        int s = 0 , e = nums.size()-1; 
        int mid = (s+e)/2;
        int aws = -1 ;
        while(s <= e){
            if(nums[mid]==target){
                aws = mid;
                s = mid + 1;
            }
            else if(nums[mid] < target){
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }
            mid = (s+e)/2;
        }return aws;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
       vector<int> aws ;  
       aws.push_back(firstOccurance(nums,target));
       aws.push_back(lastOccurance(nums,target));  
       return aws; 
    }
};
